/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.steam.thrift.DataHanding;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-27")
public class HistoryPrice implements org.apache.thrift.TBase<HistoryPrice, HistoryPrice._Fields>, java.io.Serializable, Cloneable, Comparable<HistoryPrice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HistoryPrice");

  private static final org.apache.thrift.protocol.TField GAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHANGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ChangeTime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("Price", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HistoryPriceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HistoryPriceTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String gameId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ChangeTime; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String Price; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_ID((short)1, "gameId"),
    CHANGE_TIME((short)2, "ChangeTime"),
    PRICE((short)3, "Price");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_ID
          return GAME_ID;
        case 2: // CHANGE_TIME
          return CHANGE_TIME;
        case 3: // PRICE
          return PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_ID, new org.apache.thrift.meta_data.FieldMetaData("gameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ChangeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("Price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HistoryPrice.class, metaDataMap);
  }

  public HistoryPrice() {
  }

  public HistoryPrice(
    java.lang.String gameId,
    java.lang.String ChangeTime,
    java.lang.String Price)
  {
    this();
    this.gameId = gameId;
    this.ChangeTime = ChangeTime;
    this.Price = Price;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HistoryPrice(HistoryPrice other) {
    if (other.isSetGameId()) {
      this.gameId = other.gameId;
    }
    if (other.isSetChangeTime()) {
      this.ChangeTime = other.ChangeTime;
    }
    if (other.isSetPrice()) {
      this.Price = other.Price;
    }
  }

  public HistoryPrice deepCopy() {
    return new HistoryPrice(this);
  }

  @Override
  public void clear() {
    this.gameId = null;
    this.ChangeTime = null;
    this.Price = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGameId() {
    return this.gameId;
  }

  public HistoryPrice setGameId(@org.apache.thrift.annotation.Nullable java.lang.String gameId) {
    this.gameId = gameId;
    return this;
  }

  public void unsetGameId() {
    this.gameId = null;
  }

  /** Returns true if field gameId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameId() {
    return this.gameId != null;
  }

  public void setGameIdIsSet(boolean value) {
    if (!value) {
      this.gameId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChangeTime() {
    return this.ChangeTime;
  }

  public HistoryPrice setChangeTime(@org.apache.thrift.annotation.Nullable java.lang.String ChangeTime) {
    this.ChangeTime = ChangeTime;
    return this;
  }

  public void unsetChangeTime() {
    this.ChangeTime = null;
  }

  /** Returns true if field ChangeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeTime() {
    return this.ChangeTime != null;
  }

  public void setChangeTimeIsSet(boolean value) {
    if (!value) {
      this.ChangeTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPrice() {
    return this.Price;
  }

  public HistoryPrice setPrice(@org.apache.thrift.annotation.Nullable java.lang.String Price) {
    this.Price = Price;
    return this;
  }

  public void unsetPrice() {
    this.Price = null;
  }

  /** Returns true if field Price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.Price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.Price = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GAME_ID:
      if (value == null) {
        unsetGameId();
      } else {
        setGameId((java.lang.String)value);
      }
      break;

    case CHANGE_TIME:
      if (value == null) {
        unsetChangeTime();
      } else {
        setChangeTime((java.lang.String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_ID:
      return getGameId();

    case CHANGE_TIME:
      return getChangeTime();

    case PRICE:
      return getPrice();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GAME_ID:
      return isSetGameId();
    case CHANGE_TIME:
      return isSetChangeTime();
    case PRICE:
      return isSetPrice();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HistoryPrice)
      return this.equals((HistoryPrice)that);
    return false;
  }

  public boolean equals(HistoryPrice that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gameId = true && this.isSetGameId();
    boolean that_present_gameId = true && that.isSetGameId();
    if (this_present_gameId || that_present_gameId) {
      if (!(this_present_gameId && that_present_gameId))
        return false;
      if (!this.gameId.equals(that.gameId))
        return false;
    }

    boolean this_present_ChangeTime = true && this.isSetChangeTime();
    boolean that_present_ChangeTime = true && that.isSetChangeTime();
    if (this_present_ChangeTime || that_present_ChangeTime) {
      if (!(this_present_ChangeTime && that_present_ChangeTime))
        return false;
      if (!this.ChangeTime.equals(that.ChangeTime))
        return false;
    }

    boolean this_present_Price = true && this.isSetPrice();
    boolean that_present_Price = true && that.isSetPrice();
    if (this_present_Price || that_present_Price) {
      if (!(this_present_Price && that_present_Price))
        return false;
      if (!this.Price.equals(that.Price))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGameId()) ? 131071 : 524287);
    if (isSetGameId())
      hashCode = hashCode * 8191 + gameId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChangeTime()) ? 131071 : 524287);
    if (isSetChangeTime())
      hashCode = hashCode * 8191 + ChangeTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrice()) ? 131071 : 524287);
    if (isSetPrice())
      hashCode = hashCode * 8191 + Price.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HistoryPrice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGameId()).compareTo(other.isSetGameId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameId, other.gameId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangeTime()).compareTo(other.isSetChangeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ChangeTime, other.ChangeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Price, other.Price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HistoryPrice(");
    boolean first = true;

    sb.append("gameId:");
    if (this.gameId == null) {
      sb.append("null");
    } else {
      sb.append(this.gameId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ChangeTime:");
    if (this.ChangeTime == null) {
      sb.append("null");
    } else {
      sb.append(this.ChangeTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Price:");
    if (this.Price == null) {
      sb.append("null");
    } else {
      sb.append(this.Price);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HistoryPriceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HistoryPriceStandardScheme getScheme() {
      return new HistoryPriceStandardScheme();
    }
  }

  private static class HistoryPriceStandardScheme extends org.apache.thrift.scheme.StandardScheme<HistoryPrice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HistoryPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameId = iprot.readString();
              struct.setGameIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ChangeTime = iprot.readString();
              struct.setChangeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Price = iprot.readString();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HistoryPrice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gameId != null) {
        oprot.writeFieldBegin(GAME_ID_FIELD_DESC);
        oprot.writeString(struct.gameId);
        oprot.writeFieldEnd();
      }
      if (struct.ChangeTime != null) {
        oprot.writeFieldBegin(CHANGE_TIME_FIELD_DESC);
        oprot.writeString(struct.ChangeTime);
        oprot.writeFieldEnd();
      }
      if (struct.Price != null) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeString(struct.Price);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HistoryPriceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HistoryPriceTupleScheme getScheme() {
      return new HistoryPriceTupleScheme();
    }
  }

  private static class HistoryPriceTupleScheme extends org.apache.thrift.scheme.TupleScheme<HistoryPrice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HistoryPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGameId()) {
        optionals.set(0);
      }
      if (struct.isSetChangeTime()) {
        optionals.set(1);
      }
      if (struct.isSetPrice()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGameId()) {
        oprot.writeString(struct.gameId);
      }
      if (struct.isSetChangeTime()) {
        oprot.writeString(struct.ChangeTime);
      }
      if (struct.isSetPrice()) {
        oprot.writeString(struct.Price);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HistoryPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.gameId = iprot.readString();
        struct.setGameIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ChangeTime = iprot.readString();
        struct.setChangeTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Price = iprot.readString();
        struct.setPriceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

